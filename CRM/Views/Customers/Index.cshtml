@{
    ViewData["Title"] = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewData["Title"]</h2>

@(Html.DevExtreme().DataGrid<Customer>()
        .ID("gridCustomers")
        .ShowBorders(true)
        .ShowRowLines(true)
        .ShowColumnLines(false)
        .RemoteOperations(true)
        .FilterRow(f => f.Visible(true))
        .DataSource(ds => ds.Mvc()
            .Controller(nameof(EnumController.Customers))
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Columns(columns =>
        {
            columns.AddFor(m => m.ContactName);
            columns.AddFor(m => m.ContactNumber);
            columns.AddFor(m => m.EMail);
            columns.AddFor(m => m.BusinessName);

            columns.AddFor(m => m.Address.StreetAddress).Visible(false);
            columns.AddFor(m => m.Address.Suburb).Visible(false);
            columns.AddFor(m => m.Address.State).Visible(false);
            columns.AddFor(m => m.Address.PostCode).Visible(false);
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Form(f =>
                f.Items(i =>
                {
                    i.AddGroup().Caption("Personal Information").Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(c => c.ContactName);
                        groupItems.AddSimpleFor(c => c.ContactNumber);
                        groupItems.AddSimpleFor(c => c.EMail);
                        groupItems.AddSimpleFor(c => c.BusinessName);
                    });
                    i.AddGroup().Caption("Address").Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(c => c.Address.StreetAddress);
                        groupItems.AddSimpleFor(c => c.Address.Suburb);
                        groupItems.AddSimpleFor(c => c.Address.State);
                        groupItems.AddSimpleFor(c => c.Address.PostCode);
                    });
                })
            )
            .Popup(p =>
                p.Title(nameof(Customer))
                .ShowTitle(true)
                .DragEnabled(false)
                .CloseOnOutsideClick(true)
                .Position(pos => pos
                    .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .Of(new JS("window"))
                )
            )
        )
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("grid-details"))
            .AutoExpandAll(false)
        )
)

@using (Html.DevExtreme().NamedTemplate("grid-details"))
{
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabPanel")
        .Items(items =>
        {
            items.Add()
                .Title("Leads")
                .Template(new TemplateName("grid-details-leads"))
                .Option("tabExtras", new { customerId = new JS("data.Id") });

            items.Add()
                .Title("Address")
                .Template(new TemplateName("grid-details-address"))
                .Option("tabExtras", new JS("data"));
        })
    )
}

@using(Html.DevExtreme().NamedTemplate("grid-details-leads")) {
    @(Html.DevExtreme().DataGrid<Lead>()
        .ID("grid-customer-leads-" + new JS("tabExtras.customerId"))
        .ShowBorders(true)
        .HeaderFilter(f => f.Visible(true))
        .DataSource(d => d.Mvc()
            .Controller(nameof(EnumController.Leads))
            .LoadAction("GetLeadsByCustomer")
            .LoadParams(new {
                customerId = new JS("tabExtras.customerId")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Paging(p => p.PageSize(5))
        .Columns(columns => {
            columns.AddFor(m => m.LeadTypeId)
                .Lookup(lookup =>
                    lookup.DataSource(d => d.Mvc()
                        .Controller(nameof(EnumController.LeadTypes))
                        .LoadAction("Get")
                    ).DisplayExpr("Name").ValueExpr("Id")
                )
                .Caption("Type of lead");
            columns.AddFor(m => m.Details).AllowHeaderFiltering(false);
            columns.AddFor(m => m.LeadStates).Caption("Status").AllowHeaderFiltering(false).FormItem(i => i.Visible(false));
            columns.AddFor(m => m.LeadStates).Caption("Progress").AllowHeaderFiltering(false).FormItem(i => i.Visible(false));
            columns.AddFor(m => m.CreatedDateTime).DataType(GridColumnDataType.DateTime).FormItem(f => f.Visible(false));
            columns.AddFor(m => m.CreatedBy).FormItem(i => i.Visible(false));
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Popup(p =>
                p.Title(nameof(Lead))
                .ShowTitle(true)
                .DragEnabled(false)
                .CloseOnOutsideClick(true)
                .Position(pos => pos
                    .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                    .Of(new JS("window"))
                )
            )
        )
        // DateTime field is compulsory set as required so it must be set a default value
        // *** CAN NOT use Date.now()
        .OnInitNewRow(@<text>
            function (e) {
                e.data.CreatedDateTime = new Date();
            }
        </text>)
        // Passing "CustomerId" into parameters of InsertAction
        .OnRowInserting(@<text>
            function (e) {
                e.data.customerId = tabExtras.customerId;
            }
        </text>)
    )
}


@using (Html.DevExtreme().NamedTemplate("grid-details-address"))
{
    @(Html.DevExtreme().Form<Customer>()
        .ElementAttr("class", "address-form form-container")
        .ElementAttr("style", "padding: 20px; background-color: white;")
        .FormData(new JS("tabExtras"))
        .ColCount(2)
        .Items(items =>
        {
            items.AddSimpleFor(c => c.Address.StreetAddress);
            items.AddSimpleFor(c => c.Address.Suburb);
            items.AddSimpleFor(c => c.Address.State);
            items.AddSimpleFor(c => c.Address.PostCode);
        })
        .ReadOnly(true)
    )
}