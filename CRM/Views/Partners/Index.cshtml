
@{
    ViewData[nameof(EnumViewData.Title)] = nameof(EnumController.Partners);
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    <script src="~/js/partner.js"></script>
}

<div class="row mb-4">
    <div class="col-md-12 mb-5">
        <div class="card">
            <div class="card-body pt-0">
                @(Html.DevExtreme().DataGrid<PartnerVM>()
                    .ID("gridPartners")
                    .CommonConfigs()
                    .DataSource(ds => ds.Mvc()
                        .Controller(nameof(EnumController.Partners))
                        .LoadAction("Get")
                        .InsertAction("Post")
                        .UpdateAction("Put")
                        .DeleteAction("Delete")
                        .Key("Id")
                    )
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.Logo)
                            .CellTemplate(new TemplateName("grid-partners-column-logo"));
                        columns.AddFor(m => m.Name);
                        columns.Add()
                            .DataField("Services").Caption("Services Provided")
                            .CellTemplate(new JS("function (cellElement, cellInfo) { partner.templates.tagBoxServices(cellElement, cellInfo, dxGrid.cellTypes.cellItem); }"))
                            .EditCellTemplate(new JS("function (cellElement, cellInfo) { partner.templates.tagBoxServices(cellElement, cellInfo, dxGrid.cellTypes.editCellItem); }"));

                    })
                    .Editing(e =>
                        e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                        .Popup(DXGridConfigs.EditingPopup(nameof(Partner)))
                    )
                    .MasterDetail(m => m
                        .Enabled(true)
                        .Template(new TemplateName("grid-partner-details"))
                        .AutoExpandAll(false)
                    )
                )
            </div>
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("grid-partners-column-logo"))
{
    <img src="@ImageHelper.PATH_PARTNER<%= data.Logo %>" class="grid-partner-logo" />
}

@using (Html.DevExtreme().NamedTemplate("grid-partners-column-services"))
{
    @(Html.DevExtreme().TagBox()
        //.ID("tagBoxServices")
        .DataSource(ds => ds.Mvc()
            .Controller(nameof(EnumController.LeadTypes))
            .LoadAction("Get")
            .Key("Id")
        )
        .Value(new JS("data.Services")) // setting values by Ids
        .Multiline(true)
        .SearchEnabled(true)
        .HideSelectedItems(true)
        .ShowDataBeforeSearch(false)
        .SearchMode(DropDownSearchMode.Contains)
        .DisplayExpr("Name")
        .ValueExpr("Id")
        .Placeholder("Services...")
        .SearchExpr(new string[] { "Name" })
        .ReadOnly(true)
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partners-column-services-edit"))
{
    @(Html.DevExtreme().TagBox()
        //.ID("tagBoxServices")
        .DataSource(ds => ds.Mvc()
            .Controller(nameof(EnumController.LeadTypes))
            .LoadAction("Get")
            .Key("Id")
        )
        .Value(new JS("partner.methods.getLeadTypesFromPartnerServices(data.PartnerServices)")) // setting values by Ids
        .Multiline(true)
        .SearchEnabled(true)
        .HideSelectedItems(true)
        .ShowDataBeforeSearch(false)
        .SearchMode(DropDownSearchMode.Contains)
        .DisplayExpr("Name")
        .ValueExpr("Id")
        .Placeholder("Services...")
        .SearchExpr(new string[] { "Name" })
        .ReadOnly(false)
        .OnValueChanged("partner.handlers.onServicesChanged")
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-details"))
{
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabPanel")
        .Items(items =>
        {
            items.Add()
                .Title("Branches")
                .Template(new TemplateName("grid-partner-branches"))
                .Option("masterPartner", new { partnerId = new JS("data.Id") });
        })
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branches"))
{
    @(Html.DevExtreme().DataGrid<PartnerBranch>()
        .ID(new JS("'grid-partner-branches'.concat(masterPartner.partnerId)"))
        .CommonConfigs()
        .Pager(DXGridConfigs.NoPager())
        .DataSource(d => d.Mvc()
            .Controller(nameof(EnumController.PartnerBranches))
            .LoadAction("GetBranchesByPartner")
            .LoadParams(new
            {
                partnerId = new JS("masterPartner.partnerId")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Columns(columns =>
        {
            columns.AddFor(m => m.Address.StreetAddress);
            columns.AddFor(m => m.Address.Suburb);
            columns.AddFor(m => m.Address.State);
            columns.AddFor(m => m.Address.PostCode);
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Form(f =>
                f.Items(i =>
                {
                    i.AddGroup().Caption("Address").ColSpan(2).ColCount(2).Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(c => c.Address.StreetAddress);
                        groupItems.AddSimpleFor(c => c.Address.Suburb);
                        groupItems.AddSimpleFor(c => c.Address.State);
                        groupItems.AddSimpleFor(c => c.Address.PostCode);
                    });
                })
            )
            .Popup(DXGridConfigs.EditingPopup(nameof(PartnerBranch)))
        )
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("grid-partner-branch-details"))
            .AutoExpandAll(false)
        )
        .OnRowInserting(@<text>
            function (e) {
                e.data.partnerId = masterPartner.partnerId;
            }
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branch-details"))
{
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabPanel")
        .Items(items =>
        {
            items.Add()
                .Title("Sales People")
                .Template(new TemplateName("grid-partner-branch-salespeople"))
                .Option("masterPartnerBranch", new { branchId = new JS("data.Id") });
        })
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branch-salespeople"))
{
    @(Html.DevExtreme().DataGrid<SalesPerson>()
        .ID(new JS("'grid-partner-branch-staff'.concat(masterPartnerBranch.branchId)"))
        .CommonConfigs()
        .Pager(DXGridConfigs.NoPager())
        .DataSource(d => d.Mvc()
            .Controller(nameof(EnumController.SalesPeople))
            .LoadAction("GetSalesPeopleByBranch")
            .LoadParams(new
            {
                branchId = new JS("masterPartnerBranch.branchId")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Columns(columns =>
        {
            columns.AddFor(m => m.ContactName);
            columns.AddFor(m => m.ContactNumber);
            columns.AddFor(m => m.EMail);
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Popup(DXGridConfigs.EditingPopup(nameof(SalesPerson)))
        )
        .OnRowInserting(@<text>
            function (e) {
                e.data.branchId = masterPartnerBranch.branchId;
            }
        </text>)
    )
}
