
@{
    ViewData[nameof(EnumViewData.Title)] = nameof(EnumController.Partners);
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@(Html.DevExtreme().DataGrid<Partner>()
            .ID("gridPartners")
            .ShowBorders(true)
            .ShowRowLines(true)
            .ShowColumnLines(false)
            .RowAlternationEnabled(true)
            .HoverStateEnabled(true)
            .RemoteOperations(false)
            .Paging(DXGridConfigs.MasterPaging())
            .Pager(DXGridConfigs.Pager())
            .FilterRow(f => f.Visible(true))
            .DataSource(ds => ds.Mvc()
                .Controller(nameof(EnumController.Partners))
                .LoadAction("Get")
                .InsertAction("Post")
                .UpdateAction("Put")
                .DeleteAction("Delete")
                .Key("Id")
            )
            .Columns(columns =>
            {
                columns.AddFor(m => m.Logo).Visible(false);
                columns.Add().CellTemplate(@<text>
                    <img src="~/images/partners/hp.png" />
                </text>)
                    .FormItem(f => f.Visible(false)); ;
                columns.AddFor(m => m.Name);
            })
            .Editing(e =>
                e.Mode(GridEditMode.Popup)
                .UseIcons(true)
                .AllowAdding(true)
                .AllowUpdating(true)
                .AllowDeleting(true)
                .Popup(DXGridConfigs.EditingPopup(nameof(Partner)))
            )
            .MasterDetail(m => m
                .Enabled(true)
                .Template(new TemplateName("grid-partner-details"))
                .AutoExpandAll(false)
            )
            .Selection(s => s.Mode(SelectionMode.Single))
            .OnSelectionChanged(@<text>
                function(e) {
                    CustomGridEvent.onSelectionChangedExpandDetails(e);
                }
            </text>)
            .OnContentReady(@<text>
                function(e) {
                    CustomGridEvent.onContentReady(e, "Offices");
                }
            </text>)
            .OnToolbarPreparing(@<text>
                function(e) {
                    CustomGridEvent.onToolbarPreparing(e, "Offices");
                }
            </text>)
)

@using (Html.DevExtreme().NamedTemplate("grid-partner-details"))
{
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabPanel")
        .Items(items =>
        {
            items.Add()
                .Title("Branches")
                .Template(new TemplateName("grid-partner-branches"))
                .Option("masterPartner", new { partnerId = new JS("data.Id") });
        })
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branches"))
{
    @(Html.DevExtreme().DataGrid<PartnerBranch>()
        .ID("grid-partner-branches-" + new JS("masterPartner.partnerId"))
        .ShowBorders(true)
        .ShowRowLines(true)
        .ShowColumnLines(false)
        .RowAlternationEnabled(true)
        .HoverStateEnabled(true)
        .RemoteOperations(false)
        .HeaderFilter(f => f.Visible(false))
        .Paging(DXGridConfigs.DetailsPaging())
        .Pager(DXGridConfigs.Pager())
        .DataSource(d => d.Mvc()
            .Controller(nameof(EnumController.PartnerBranches))
            .LoadAction("GetBranchesByPartner")
            .LoadParams(new
            {
                partnerId = new JS("masterPartner.partnerId")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Paging(p => p.PageSize(5))
        .Columns(columns =>
        {
            columns.AddFor(m => m.Address.StreetAddress);
            columns.AddFor(m => m.Address.Suburb);
            columns.AddFor(m => m.Address.State);
            columns.AddFor(m => m.Address.PostCode);
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Form(f =>
                f.Items(i =>
                {
                    i.AddGroup().Caption("Address").ColSpan(2).ColCount(2).Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(c => c.Address.StreetAddress);
                        groupItems.AddSimpleFor(c => c.Address.Suburb);
                        groupItems.AddSimpleFor(c => c.Address.State);
                        groupItems.AddSimpleFor(c => c.Address.PostCode);
                    });
                })
            )
            .Popup(DXGridConfigs.EditingPopup(nameof(PartnerBranch)))
        )
        .OnRowInserting(@<text>
            function (e) {
                e.data.partnerId = masterPartner.partnerId;
            }
        </text>)
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("grid-partner-branch-details"))
            .AutoExpandAll(false)
        )
        .Selection(s => s.Mode(SelectionMode.Single))
        .OnSelectionChanged(@<text>
            function(e) {
                CustomGridEvent.onSelectionChangedExpandDetails(e);
            }
        </text>)
        .OnContentReady(@<text>
            function(e) {
                CustomGridEvent.onContentReady(e, "Branches");
            }
        </text>)
        .OnToolbarPreparing(@<text>
            function(e) {
                CustomGridEvent.onToolbarPreparing(e, "Branches");
            }
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branch-details"))
{
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabPanel")
        .Items(items =>
        {
            items.Add()
                .Title("Sales People")
                .Template(new TemplateName("grid-partner-branch-salespeople"))
                .Option("masterPartnerBranch", new { branchId = new JS("data.Id") });
        })
    )
}

@using (Html.DevExtreme().NamedTemplate("grid-partner-branch-salespeople"))
{
    @(Html.DevExtreme().DataGrid<SalesPerson>()
        .ID("grid-partner-branch-staff" + new JS("masterPartnerBranch.branchId"))
        .ShowBorders(true)
        .ShowRowLines(true)
        .ShowColumnLines(false)
        .RowAlternationEnabled(true)
        .HoverStateEnabled(true)
        .RemoteOperations(false)
        .Paging(DXGridConfigs.DetailsPaging())
        .Pager(DXGridConfigs.Pager())
        .HeaderFilter(f => f.Visible(false))
        .DataSource(d => d.Mvc()
            .Controller(nameof(EnumController.SalesPeople))
            .LoadAction("GetSalesPeopleByBranch")
            .LoadParams(new
            {
                branchId = new JS("masterPartnerBranch.branchId")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Columns(columns =>
        {
            columns.AddFor(m => m.ContactName);
            columns.AddFor(m => m.ContactNumber);
            columns.AddFor(m => m.EMail);
        })
        .Editing(e =>
            e.Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Popup(DXGridConfigs.EditingPopup(nameof(SalesPerson)))
        )
        .OnRowInserting(@<text>
            function (e) {
                e.data.branchId = masterPartnerBranch.branchId;
            }
        </text>)
        .OnContentReady(@<text>
            function(e) {
                CustomGridEvent.onContentReady(e, "Salespeople");
            }
        </text>)
        .OnToolbarPreparing(@<text>
            function(e) {
                CustomGridEvent.onToolbarPreparing(e, "Salespeople");
            }
        </text>)
    )
}
