

<!-- CKEditor -->
<script type="text/javascript" src="~/quillpro/plugins/ckeditor/ckeditor.js"></script>
<!-- This jQuery Adapter is REQUIRED for CKEditor to function properly -->
<script type="text/javascript" src="~/quillpro/plugins/ckeditor/adapters/jquery.js"></script>


@using (Html.DevExtreme().NamedTemplate("template-grid-leads"))
{
    @(Html.DevExtreme().DataGrid<LeadVM>()
        .ID("gridLeads")
        .CommonConfigs()
        .DataSource(ds => ds.Mvc()
            .Controller(nameof(EnumController.Leads))
            .LoadAction("GetViewModel")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .SearchPanel(DXGridConfigs.ShowSearchPanel())
        .Columns(c => {
            // Something wrong with using Guid as ValueExpr
            c.AddFor(m => m.CustomerId).Visible(false) // Edit only
                .EditCellTemplate(new JS("lead.templates.lookupCustomer"));
            //.Lookup(l => l
            //    .DataSource(ds => ds.Mvc().Controller(nameof(EnumController.Customers))
            //        .LoadAction("GetForLookup")
            //        .Key("Id")
            //    )
            //    .DisplayExpr("CustomerUnique")
            //    .ValueExpr("Id")
            //);
            c.AddFor(m => m.LeadTypeId).Visible(false) // Edit only
                .Lookup(l => l
                    .DataSource(ds => ds.Mvc().Controller(nameof(EnumController.LeadTypes))
                        .LoadAction("Get")
                        .Key("Id")
                    )
                    .DisplayExpr("Name")
                    .ValueExpr("Id")
                );

            c.AddFor(m => m.CustomerUnique).Caption("Customer") // Display only
                .Width("15%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-customer"));
            c.AddFor(m => m.LeadTypeName).Caption("Type") // Display only
                .Width("12%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-type"));
            c.AddFor(m => m.Details).Caption("Details") // Display & Edit
                .Width("35%")
                .FormItem(i => i.Label(l => l.Location(FormLabelLocation.Top)))
                .CellTemplate(new TemplateName("template-grid-leads-column-details"))
                .EditCellTemplate(new JS("lead.templates.editorDetails"));
            c.AddFor(m => m.StatusName).Caption("Status") // Display only
                .Width("10%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-status"));
            // *** searchable BUT cannot remove the validation rule of "Required" in edit mode
            //c.AddFor(m => m.CreatedOn) // Display only
            //    .DataField("CreatedOn").DataType(GridColumnDataType.Date)
            //    .Width("15%")
            //    .FormItem(form => form.Visible(true))
            //    .CellTemplate(new TemplateName("template-grid-leads-column-created-on"));

            // *** Can remove the validation rule of "Required" in edit mode BUT not searchable
            //c.Add() // Display only
            //    .Width("15%")
            //    .FormItem(form => form.Visible(true))
            //    .CellTemplate(new TemplateName("template-grid-leads-column-created-on"))
            //    .EditCellTemplate(new JS("lead.templates.dateBoxCreatedOn"));

            // The BEST solution for "Date" datafield, searchable & no validation rule when it is hidden
            c.Add() // Display only
                .DataField("CreatedOn").DataType(GridColumnDataType.Date)
                .Width("15%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-created-on"));
            c.Add() // Display only
                .FormItem(form => form.Visible(false))
                .Width("13%") // adding CustomerEmail here for text searching
                .CellTemplate(new TemplateName("template-grid-leads-column-actions"));
        })
        .Editing(e => e
            .Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            //.Form(f => f.Items(i =>
            //{
            //    i.AddSimpleFor(m => m.CustomerId)
            //        .Editor(editor => editor
            //            .Lookup()
            //            .DataSource(ds => ds.Mvc().Controller(nameof(EnumController.Customers))
            //                .LoadAction("GetForLookup")
            //                .Key("Id")
            //            )
            //            .DisplayExpr("CustomerUnique")
            //            .ValueExpr("Id")
            //            .CloseOnOutsideClick(true)
            //            .OnContentReady("function(e) { e.component.option('value', '5f6028b8-716a-40b7-d632-08d62ac3adc5'); }")
            //        );
            //}))
            .Popup(DXGridConfigs.EditingPopup(nameof(Lead), 550))
        )
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("masterdetail-template-grid-assignments"))
        )
        .OnToolbarPreparing("lead.dxGrid.handlers.onToolbarPreparing")
        .OnEditorPreparing("function(e) { if (e.dataField === 'CreatedOn') e.setValue(moment()); }")
    )
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-by-customer"))
{
    @(Html.DevExtreme().DataGrid<LeadVM>()
        .ID(new JS("'gridLeads'.concat(templateData.Id)"))
        .CommonConfigs()
        .DataSource(ds => ds.Mvc()
            .Controller(nameof(EnumController.Leads))
            .LoadAction("GetViewModelByCustomer")
            .LoadParams(new
            {
                id = new JS("templateData.Id")
            })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
        )
        .Columns(c => {
            c.AddFor(m => m.LeadTypeId).Visible(false) // Edit only
                .Lookup(l => l
                    .DataSource(ds => ds.Mvc().Controller(nameof(EnumController.LeadTypes))
                        .LoadAction("Get")
                        .Key("Id")
                    )
                    .DisplayExpr("Name")
                    .ValueExpr("Id")
                );

            c.AddFor(m => m.LeadTypeName).Caption("Type")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-type"));
            c.AddFor(m => m.Details).Caption("Details")
                .Width("35%")
                .FormItem(i => i.Label(l => l.Location(FormLabelLocation.Top)))
                .CellTemplate(new TemplateName("template-grid-leads-column-details"))
                .EditCellTemplate(new JS("lead.templates.editorDetails"));
            c.AddFor(m => m.StatusName).Caption("Status")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-status"));
            // The BEST solution for "Date" datafield, searchable & no validation rule when it is hidden
            c.Add() // Display only
                .DataField("CreatedOn").DataType(GridColumnDataType.Date)
                .Width("15%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-created-on"));
            c.Add()
                .Width("15%")
                .FormItem(form => form.Visible(false))
                .CellTemplate(new TemplateName("template-grid-leads-column-actions"));
        })
        .SearchPanel(DXGridConfigs.ShowSearchPanel())
        .Editing(e => e
            .Mode(GridEditMode.Popup)
            .UseIcons(true)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Popup(DXGridConfigs.EditingPopup(nameof(Lead), 550))
        )
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("masterdetail-template-grid-assignments"))
        )
        .OnToolbarPreparing("lead.dxGrid.handlers.onToolbarPreparing")
        .OnRowInserting(@<text>
            function (e) {
                e.data.customerId = templateData.Id;
            }
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-customer"))
{
    <div class="d-flex">
        <span>
            <%= data.CustomerUnique %>

            <a data-toggle="tooltip"
               data-placement="bottom"
               data-html="true"
               title="<%= data.CustomerDetails %>">
                <span class="batch-icon batch-icon-zoom-in-alt text-priamry"></span>
            </a>
        </span>
    </div>
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-type"))
{
    <div>
        <img src="<%= data.LeadTypeImage %>" width="32" height="32" /> 
        <%= data.LeadTypeName %>
    </div>
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-details"))
{
    <span><%= data.Details %></span>
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-status"))
{
    <span><%= data.StatusTag %></span>
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-created-on"))
{
    <span><%= data.CreatedOnShortFormat %></span>
    <a href="#/" data-toggle="tooltip"
        data-placement="bottom"
        data-html="true"
        title="<%= data.History %>">
        <span class="batch-icon batch-icon-zoom-in-alt text-priamry"></span>
    </a>
}

@using (Html.DevExtreme().NamedTemplate("template-grid-leads-column-actions"))
{
    @(Html.DevExtreme().SelectBox()
        .DataSource(new JS("data.Actions"))
        .ActionCommonConfigs()
        .OnSelectionChanged("lead.handlers.onActionChanged")
    )
}

@using (Html.DevExtreme().NamedTemplate("masterdetail-template-grid-assignments"))
{
     // This does not work, parameter cannot be passed into the template via form
    @*@(Html.DevExtreme().Form().ID("form-grid-assignments")
        .Items(i =>
        {
            i.AddSimple().Template(new TemplateName("template-grid-assignments"))
                .Option("templateData", new { LeadId = new JS("data.Id") });
        })
    )*@

    @* Using tabpanel for passing parameter to the grid in the template *@
    @(Html.DevExtreme().TabPanel()
        .FocusStateEnabled(false)
        .ElementAttr("class", "tabpanel-single-item") // Adding this class to hide tabpanel's header for a tabpanel with only 1 item
        .Items(items =>
        {
            items.Add()
                .Title("Assignments")
                .Template(new TemplateName("template-grid-assignments-by-lead"))
                .Option("templateData", new {
                    Id = new JS("data.Id")
                });
        })
    )
}